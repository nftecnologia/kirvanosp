#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔍 Running pre-commit checks..."

# Check if we're in a Git repository
if [ ! -d .git ]; then
  echo "❌ Not in a Git repository"
  exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
  echo "ℹ️  No staged files to check"
  exit 0
fi

echo "📁 Checking $(echo "$STAGED_FILES" | wc -l) staged files..."

# Check for Ruby files
RUBY_FILES=$(echo "$STAGED_FILES" | grep -E '\.(rb|rake)$' || true)
if [ -n "$RUBY_FILES" ]; then
  echo "🔴 Checking Ruby files with RuboCop..."
  if ! bundle exec rubocop $RUBY_FILES; then
    echo "❌ RuboCop failed. Run 'bundle exec rubocop -a' to auto-fix issues."
    exit 1
  fi
  echo "✅ RuboCop passed"
fi

# Check for JavaScript/Vue files
JS_VUE_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|vue|ts)$' || true)
if [ -n "$JS_VUE_FILES" ]; then
  echo "🟡 Checking JavaScript/Vue files with ESLint..."
  if ! pnpm eslint $JS_VUE_FILES; then
    echo "❌ ESLint failed. Run 'pnpm eslint:fix' to auto-fix issues."
    exit 1
  fi
  echo "✅ ESLint passed"
fi

# Check for secrets and sensitive information
echo "🔒 Checking for secrets..."
SECRETS_FOUND=false

# Check for common secret patterns
for file in $STAGED_FILES; do
  if [ -f "$file" ]; then
    # Check for various secret patterns
    if grep -qE "(password|secret|key|token|api_key)" "$file" | grep -qE "(=|:)\s*['\"]?[a-zA-Z0-9]{20,}"; then
      echo "⚠️  Possible secret found in $file"
      SECRETS_FOUND=true
    fi
    
    # Check for AWS keys
    if grep -qE "AKIA[0-9A-Z]{16}" "$file"; then
      echo "⚠️  AWS Access Key found in $file"
      SECRETS_FOUND=true
    fi
    
    # Check for database URLs with credentials
    if grep -qE "://[^:]+:[^@]+@" "$file"; then
      echo "⚠️  Database URL with credentials found in $file"
      SECRETS_FOUND=true
    fi
  fi
done

if [ "$SECRETS_FOUND" = true ]; then
  echo "❌ Potential secrets found in staged files"
  echo "💡 Review the files and remove any sensitive information"
  exit 1
fi

# Check for debugging code
echo "🐛 Checking for debugging code..."
DEBUG_FOUND=false

for file in $STAGED_FILES; do
  if [ -f "$file" ]; then
    # Check for common debug statements
    if grep -qE "(console\.log|debugger|binding\.pry|byebug|puts|p [^a])" "$file"; then
      echo "⚠️  Debug statement found in $file"
      DEBUG_FOUND=true
    fi
  fi
done

if [ "$DEBUG_FOUND" = true ]; then
  echo "⚠️  Debug statements found in staged files"
  echo "💡 Consider removing debug statements before committing"
  echo "🤔 Continue anyway? (y/n)"
  read -r response
  if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
    exit 1
  fi
fi

# Check for large files
echo "📏 Checking file sizes..."
LARGE_FILES=$(echo "$STAGED_FILES" | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9, $5}' || true)
if [ -n "$LARGE_FILES" ]; then
  echo "⚠️  Large files detected (>1MB):"
  echo "$LARGE_FILES"
  echo "💡 Consider using Git LFS for large files"
  echo "🤔 Continue anyway? (y/n)"
  read -r response
  if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
    exit 1
  fi
fi

# Check for merge conflict markers
echo "🔀 Checking for merge conflict markers..."
for file in $STAGED_FILES; do
  if [ -f "$file" ] && grep -qE "^(<<<<<<<|=======|>>>>>>>)" "$file"; then
    echo "❌ Merge conflict markers found in $file"
    exit 1
  fi
done

echo "✅ All pre-commit checks passed!"
echo "🚀 Ready to commit!"